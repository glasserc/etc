#! /usr/bin/env python

"""Imports files by date into a 'repository' organized by timestamp

For example, you might use this to organize your photo collection into
~/Pictures/YYYY/MM/DD/image-1111.jpg.

The -f (--format) option defaults to %Y/%m/%d/.  The trailing '/',
indicates a directory (%Y/%m/%d/basename.jpg).  Otherwise the format
is assumed to specify a full name (%Y/%m/%d.jpg).  You may also use
'%f' to mean 'the old file basename'.

The -e option lets you confirm mtime information against the EXIF tags
stored in the file.  The confirmation allows up to 4 seconds of skew.
If there is a disagreement, EXIF information is preferred, and a warning
is printed about the file.

Test:
mkdir repo; touch -d "last Thursday" file1; touch -d "2008-01-03" fILE2
import-files-by-mtime -l -n repo/ f*
find repo
"""

import os
import os.path
import sys
import shutil
import datetime
import argparse
import exifread

EXIF_TS_FORMAT = "%Y:%m:%d %H:%M:%S"
DATETIME_SKEW_MIN = datetime.timedelta(seconds=-4)
DATETIME_SKEW_MAX = datetime.timedelta(seconds=4)

class ImportFiles(object):
    parser = argparse.ArgumentParser(description=
                                     "Import files into a 'repository' organized by timestamp.")
    parser.add_argument('repository', type=str,
                        help='repository to import files into')

    parser.add_argument('filename', type=str, nargs='+',
                        help='files to import into the repository')

    parser.add_argument('-F', '--format', type=str, nargs='?', default="%Y/%m/%d/",
                        help="""date format to use (default %%Y/%%m/%%d/); %%f means file basename. Be sure to put a / at the end if you mean this to be a directory!""")
    parser.add_argument('-n', '--dry-run', action='store_true', default=False,
                        help='simulate; print what would be done')

    parser.add_argument('-l', '--lowercase', action='store_true', default=False,
                        help="make new filenames lowercase")

    parser.add_argument('-c', '--copy', action='store_true', default=False,
                        help="copy instead of moving")

    parser.add_argument('-R', '--replace', action='store_true', default=False,
                        help="replace existing files")

    parser.add_argument('-e', '--confirm-exif', action='store_true', default=False,
                        help='confirm mtime against EXIF tags')

    def new_filename(self, fname):
        format = self.format
        if "%f" in self.format:
            format = format.replace('%f', os.path.basename(fname))

        time = self.get_time(fname)

        #print("file", fname, "time", time, 'format', self.format)
        return time.strftime(format)

    def get_time(self, fname):
        name, ext = os.path.splitext(fname)
        mtime = self.get_time_mtime(fname)

        if self.confirm_exif and ext.lower() in ['.jpg', '.jpeg']:
            ts = self.get_time_exif(fname)
            if ts:
                if DATETIME_SKEW_MIN < (mtime - ts) < DATETIME_SKEW_MAX:
                    pass   # close enough
                else:
                    print("Warning: mtime and exif are different for {0}: mtime {1}, exif {2}, diff {3}".format(fname, mtime, ts, repr(mtime-ts)))
                    print("Using exif information")
                    mtime = ts
        return mtime

    def get_time_exif(self, fname):
        f = open(fname, 'rb')
        tags = exifread.process_file(f)
        f.close()
        if 'EXIF DateTimeOriginal' in tags:
            ts = datetime.datetime.strptime(str(tags['EXIF DateTimeOriginal']), EXIF_TS_FORMAT)
            return ts

    def get_time_mtime(self, fname):
        ts = os.path.getmtime(fname)
        time = datetime.datetime.fromtimestamp(ts)
        return time

    def run(self, args):
        options = self.parser.parse_args(args, self)
        for file in self.filename:
            new_file = os.path.join(self.repository, self.new_filename(file))

            # Find the directory and the full name for the file
            # target.
            if new_file.endswith('/'):
                # If the new_filename ends with a /, interpret this as the
                # directory, and compute the full name.
                new_dir = new_file
            else:
                # Otherwise, new_filename is a full path, compute the directory.
                # FIXME: is this confusing?  Maybe we shouldn't allow
                # this unless user explicitly confirms?
                new_dir = os.path.dirname(new_file)

            new_basename = os.path.basename(file)
            if self.lowercase:
                new_basename = new_basename.lower()

            new_file = os.path.join(new_dir, new_basename)

            if os.path.exists(new_file) and not self.replace:
                print("Skipping", file, "because", new_file, "already exists")
                continue

            if self.copy:
                print("Copying", file, 'to', new_file)
            else:
                print("Moving", file, 'to', new_file)

            if not self.dry_run:
                if not os.path.exists(new_dir):
                    os.makedirs(new_dir)

                if self.copy:
                    shutil.copy2(file, new_file)
                else:
                    shutil.move(file, new_file)

if __name__ == '__main__':
    ImportFiles().run(sys.argv[1:])
