# -*- coding: utf-8 -*-
# name: class
# contributor: Orestis Markou
# contributor: Nishio Hirokazu
# contributor: Yasser González Fernández <yglez@uh.cu>
# fixme: highlights differently from original, due to concat of 8 spaces
# fixme: no way to pull this common functionality out of def, defm, class?
# fixme: can't even pull it out of the two places in class?
# --
class ${1:ClassName}(${2:object}):
    """$3
    """

    def __init__(self, $4):
        """$5
${4:$
        (let* ((indent
                (concat "\n" (make-string (+ 8 (current-column)) 32)))
               (args
                (mapconcat
                 '(lambda (x)
                    (if (not (string= (nth 0 x) ""))
                        (concat "- " (char-to-string 96) (nth 0 x)
                                (char-to-string 96) ":")))
                 (mapcar
                  '(lambda (x)
                     (mapcar
                      (lambda (x)
                        (replace-regexp-in-string "[[:blank:]]*$" ""
                         (replace-regexp-in-string "^[[:blank:]]*" "" x))) x))
                  (mapcar '(lambda (x) (split-string x "="))
                          (split-string text ",")))
                 indent)))
          (if (string= args "")
              (concat (make-string 8 32) (make-string 3 34))
            (mapconcat
             'identity
             (list "" "Arguments:" args (make-string 3 34))
             indent)))
        }
        ${4:$
        (let* ((indent
                (concat "\n" (make-string (current-column) 32)))
               (ivars
                (mapconcat
                 '(lambda (pair)
                    (let ((name (car pair))
                          (default nil)) ; FIXME?
                       (if (not (string= name ""))
                           (concat "self._" name " = " name))))
                 (mapcar
                  '(lambda (x)
                     (mapcar
                      (lambda (x)
                        (replace-regexp-in-string "[[:blank:]]*$" ""
                         (replace-regexp-in-string "^[[:blank:]]*" "" x))) x))
                  (mapcar '(lambda (x) (split-string x "="))
                          (split-string text ",")))
                 indent)))
          (if (string= ivars "")
               (make-string 8 32)
             (mapconcat
              'identity
              (list ivars "")
              indent)))
        }
        $0
