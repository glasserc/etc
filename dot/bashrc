# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
. ~/etc/setup_path

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

init_colors(){
    # FIXME: more colors; better names
    # This is taken from http://mywiki.wooledge.org/BashFAQ/037
    # The intent is that if this function doesn't get run, all these escape
    # sequences will expand to empty strings, and do nothing.
    export BOLD=$(     tput bold   || tput md      )
    export GREEN=$(    tput setaf 2|| tput AF 2    )
    export YELLOW=$(   tput setaf 3|| tput AF 3    )
    export BLUE=$(     tput setaf 4|| tput AF 4    )
    export RS=$(       tput sgr0 || tput me      )
}

if [ "$color_prompt" = yes ]; then
   init_colors
   # GREEN\u@\hNORMAL:LIGHTBLUE\wNORMAL$
fi
unset color_prompt force_color_prompt


# git branch in prompt from http://log.damog.net/2008/12/two-git-tips/
GIT_PROMPT=
for git_prompt_file in '/usr/lib/git-core/git-sh-prompt' '/usr/share/git-core/contrib/completion/git-prompt.sh'; do
    if [ -f "$git_prompt_file" ] ; then
        GIT_PROMPT=$git_prompt_file
    fi
done

if [ -n "$GIT_PROMPT" ]; then
   . $GIT_PROMPT
   GITPS1='$(__git_ps1 ":%s")'
   PS1="\[${BOLD}${GREEN}\]${debian_chroot:+($debian_chroot)}\u@\h:\[${BLUE}\]\w\[${RS}${BOLD}${YELLOW}\]${GITPS1}\[${RS}\]\\$ "
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/etc/bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/etc/bash_aliases ]; then
    . ~/etc/bash_aliases
fi



# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

status(){
    (
        cd
        export GIT_CONFIG=~/.config/git/gitconfig.status
        mr status | python ~/.config/scripts/strip_empty_stanzas.py
    )
}

alias parse_epoch='python -c "import sys, datetime; print datetime.datetime.fromtimestamp(int(sys.argv[1]))"'
alias svn-cleanup="svn st | grep ^? | cut -c2- | xargs rm"

if [ -f ~/.config/etc.machine/`hostname -s`.rc ]; then
   source ~/.config/etc.machine/`hostname -s`.rc
fi

export EDITOR=emacs
export NETHACKOPTIONS=number_pad:1,pickup_types:$,!rest_on_space,time,color,showexp

# Not sure about the best way to do this, but in lieu of a better way to
# make git understand my email is not ethan@sundance..
export EMAIL=ethan@betacantrips.com

# I freakin' hate history expansion, because it always tries to expand
# exclamation marks in commit messages, and I never actually use it. I
# always either use Meta-. to fetch "last word" (rarely) or more often
# just use up/down/C-k/C-y to slice and dice whatever commands I need
# to.  Some people seem to think it's a great time-saver to do !$ or
# whatever, but if you have to struggle harder to think about what's
# actually going to happen, it's a false economy in my opinion. I'd
# much rather take the extra fraction-of-a-second and see what command
# I'm about to execute.

# Another great joke: ^foo^bar^ only replaces the first foo! And
# ^foo^bar^g replaces the first foo with bar, then adds a g to the end
# of whatever command you were executing. Totally useless.  This could
# actually be a useful function but I'm not willing to type
# !!:s/foo/bar/g in order to make it happen. Haven't found a better
# way, though.

set +H

# Taken from Chris Lamb <http://chris-lamb.co.uk/2010/04/22/locating-source-any-python-module/>
# Use like "cdp twisted.web"
cdp () {
  cd "$(python -c "import os.path as _, ${1}; \
    print _.dirname(_.realpath(${1}.__file__[:-1]))"
  )"
}

# From http://ruslanspivak.com/2010/11/25/bash-history-incremental-search-forward/
# 1.Disable terminal flow control altogether:
stty -ixon
# Now your Ctrl-S will work like a charm
# 2.If you want to continue to use terminal flow control then you can just re-bind its Ctrl-S
#    to, letâ€™s say, Ctrl-X allowing BASH Ctrl-S to work as incremental history search forward:
# stty stop ^X
